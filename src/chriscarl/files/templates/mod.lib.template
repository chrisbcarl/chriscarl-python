#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Author:         Chris Carl
Email:          chrisbcarl@outlook.com
Date:           2022-08-26
Description:

Stub.
'''

# stdlib imports
from __future__ import absolute_import, print_function, division, with_statement  # , unicode_literals
import os
import sys
# "shadow module" hack
if sys.path[0] == '':  # occurs in interactive mode
    __old_path = sys.path
    sys.path = sys.path[1:] + ['']
else:
    __old_path = []
# this would import THIS file without "shadow module" hack
# import the original unmodified module which can be used in modifications below
import cannonical_shadow_module
# polutes this "shadow module" locals with the original locals, allowing it to behave as normal
from cannonical_shadow_module import *  # noqa: F403
import logging  # noqa: E402  # pylint: disable=import-error
from typing import Any, Tuple, Dict  # noqa: E402

# third party imports

# project imports

SCRIPT_RELPATH = 'chriscarl/libraries/third/parameterized.py'
if not hasattr(sys, '_MEIPASS'):
    SCRIPT_FILEPATH = os.path.abspath(__file__)
else:
    SCRIPT_FILEPATH = os.path.abspath(os.path.join(sys._MEIPASS, SCRIPT_RELPATH))  # pylint: disable=no-member
SCRIPT_DIRPATH = os.path.dirname(SCRIPT_FILEPATH)
SCRIPT_NAME = os.path.splitext(os.path.basename(__file__))[0]
THIS_MODULE = sys.modules[__name__]
LOGGER = logging.getLogger(__name__)
LOGGER.addHandler(logging.NullHandler())

# undo "shadow module" mods
if __old_path:
    sys.path = __old_path
